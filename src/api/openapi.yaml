openapi: 3.0.0

info:
  title: Test API
  description: Test API POC for REST API.
  version: 1.0.0
  termsOfService: http://swagger.io/terms/
  contact:
    email: info@3DHDSoft.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io

servers:
  - url: http://testapp-02.eastus2.cloudapp.azure.com:8080
    description: Test API API - k8s
  - url: http://192.168.10.211:8080
    description: Test API API
  - url: http://localhost:8081
    description: Test API API - Forwarded k8s

tags:
  - name: post
    description: Everything about your Posts
    externalDocs:
      description: Find out more
      url: http://post.io
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our user
      url: http://user.io

paths:
  # User
  /user:
    get:
      tags:
        - user
      summary: Get user
      operationId: getUser
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        404:
          description: User not found
      x-swagger-router-controller: User

    put:
      tags:
        - user
      summary: Signup. Create a new user.
      operationId: signupUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user email for login
                  format: email
                name:
                  type: string
                  description: The user name for login
                role:
                  type: string
                  description: The user role for login
                password:
                  type: string
                  description: The password for login in clear text
                  minLength: 5
              required:
                - email
                - name
                - role
                - password
              example:
                email: test@domain.com
                name: Ivan
                role: admin
                password: tester
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        400:
          description: Invalid username/password supplied
      x-swagger-router-controller: User

  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user email for login
                  format: email
                password:
                  type: string
                  description: The password for login in clear text
                  minLength: 5
              required:
                - email
                - password
              example:
                email: test@domain.com
                password: tester
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - userId
                properties:
                  userId:
                    type: string
                  token:
                    type: string
                    format: '^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$'
        404:
          description: Invalid Login/Password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        400:
          description: Invalid username/password supplied
      x-swagger-router-controller: User

  /user/status:
    get:
      tags:
        - user
      summary: Get user status
      operationId: getUserStatus
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        404:
          description: User not found
      x-swagger-router-controller: User

    patch:
      tags:
        - user
      summary: Update user status
      operationId: updateUserStatus
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: The user's new status
              required:
                - status
              example:
                status: I am Updated!
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        404:
          description: User not found
      x-swagger-router-controller: User

  # Post
  /post:
    post:
      tags:
        - post
      summary: Create a new post.
      operationId: createPost
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The post title
                  minLength: 5
                content:
                  type: string
                  description: The post content
                  minLength: 5
                imageUrl:
                  type: string
                  description: The post imageUrl
              required:
                - title
                - content
                - imageUrl
              example:
                title: Tests
                content: Tests
                imageUrl: some url
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        422:
          description: Validation failed, entered data is incorrect
      x-swagger-router-controller: Post

  /post/{id}:
    get:
      tags:
        - post
      summary: Get post
      operationId: getPost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Post id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        404:
          description: Post not found
      x-swagger-router-controller: Post

    put:
      tags:
        - post
      summary: Update post.
      operationId: updatePost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Post id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The post title
                  minLength: 5
                content:
                  type: string
                  description: The post content
                  minLength: 5
                imageUrl:
                  type: string
                  description: The post imageUrl
              required:
                - title
                - content
                - imageUrl
              example:
                title: Tests 2
                content: Tests 2
                imageUrl: some url 2
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        422:
          description: Validation failed, entered data is incorrect
      x-swagger-router-controller: Post

    delete:
      tags:
        - post
      summary: Delete a post.
      operationId: deletePost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Post id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        422:
          description: Validation failed, entered data is incorrect
      x-swagger-router-controller: Post

  /post/all:
    get:
      tags:
        - post
      summary: Get all posts
      operationId: getPosts
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        404:
          description: Post not found
      x-swagger-router-controller: Post

  # Test
  /:
    get:
      tags:
        - test
      summary: Test root
      operationId: getRoot
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      x-swagger-router-controller: Test

  # Configure Liveness, Readiness and Startup Probes - https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  # Health Checks Endpoints - https://github.com/nodeshift/nodejs-reference-architecture/blob/main/docs/operations/healthchecks.md#endpoints
  # liveness Probe
  /livez:
    get:
      tags:
        - test
      summary: Liveness Probe
      operationId: livenessProbe
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      x-swagger-router-controller: Test

  # readiness Probe
  /readyz:
    get:
      tags:
        - test
      summary: Readiness Probe
      operationId: readinessProbe
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      x-swagger-router-controller: Test

  # Clustering Test
  /cluster:
    get:
      tags:
        - test
      summary: Clustering Test
      operationId: clusteringTest
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      x-swagger-router-controller: Test

  # Clustering Test
  /redis:
    get:
      tags:
        - test
      summary: Redis Test
      operationId: redisTest
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      x-swagger-router-controller: Test

components:
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          description: User email
          format: email
        password:
          type: string
          description: User password
          minLength: 5
        name:
          type: string
          description: User name
        role:
          type: string
          description: User role
        status:
          type: string
          description: User status
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"
          description: Posts by user
      example:
        email: email
        password: password
        name: name
        status: status
        posts: []

    Post:
      type: object
      properties:
        title:
          type: string
          description: Post title
          minLength: 5
        imageUrl:
          type: string
          description: Post imageUrl
        content:
          type: string
          description: Post content
          minLength: 5
        creator:
          type: object
          $ref: "#/components/schemas/User"
          description: Post creator user
      example:
        title: title
        imageUrl: imageUrl
        content: content
        creator: creator

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        # type:
        #   type: string
        message:
          type: string
      example:
        code: 0
        # type: type
        message: message

    ErrorModel:
      type: object
      properties:
        code:
          type: integer
          format: int32
        # type:
        #   type: string
        message:
          type: string
      example:
        code: 0
        # type: type
        message: message

  parameters:
    offsetParam:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
      description: The number of items to skip before returning the results
    limitParam:
      in: query
      name: limit
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20

  requestBodies:
    User:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
      required: true

  responses:
    GeneralError:
      description: An error occurred
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorModel"

  examples:
    tshirt:
      summary: Sample T-shirt data
      value:
        id: 17
        name: T-shirt
        description: 100% cotton shirt
        categories:
          - clothes

  links: {}

  callbacks: {}

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
